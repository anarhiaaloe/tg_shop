from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import Database
from keyboards import admin_order_keyboard

router = Router()

# ‚ö†Ô∏è –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Mops_thedog
ADMIN_ID = 724118384


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class OrderForm(StatesGroup):
    fio = State()
    address = State()
    postal_code = State()
    wait_delivery_price = State()


# --- –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(F.data == "order:make")
async def start_order(callback: CallbackQuery, state: FSMContext, db: Database):
    # ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
    await db.ensure_user(
        tg_id=callback.from_user.id,
        username=callback.from_user.username,
        full_name=callback.from_user.full_name,
    )

    await state.set_state(OrderForm.fio)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await callback.answer()


@router.message(OrderForm.fio)
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(OrderForm.address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")


@router.message(OrderForm.address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderForm.postal_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:")


@router.message(OrderForm.postal_code)
async def process_postal(message: Message, state: FSMContext, db: Database):
    await state.update_data(postal_code=message.text)
    data = await state.get_data()

    # ‚úÖ –µ—â—ë —Ä–∞–∑ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –ë–î
    await db.ensure_user(
        tg_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name,
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = await db.get_cart(message.from_user.id)
    if not cart:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await state.clear()
        return

    # –ü–æ–¥—Å—á—ë—Ç —Å—É–º–º—ã
    total = sum(int(item["price"]) * item["quantity"] for item in cart)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏)."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    cart_text = "\n".join(
        [
            f"- {item['name']} ({item['size']}) x{item['quantity']} = {int(item['price']) * item['quantity']}‚ÇΩ"
            for item in cart
        ]
    )
    text_for_admin = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìÆ –ò–Ω–¥–µ–∫—Å: {data['postal_code']}\n"
        f"üÜî User ID: {message.from_user.id}\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{cart_text}\n\n"
        f"–°—É–º–º–∞ –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏: {total}‚ÇΩ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await message.bot.send_message(
        ADMIN_ID,
        text_for_admin,
        reply_markup=admin_order_keyboard(message.from_user.id, total),
    )

    await state.clear()


# --- –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ ---
@router.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject(callback: CallbackQuery):
    _, user_id = callback.data.split(":")
    user_id = int(user_id)

    await callback.bot.send_message(
        user_id,
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @Mops_thedog",
    )
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")


@router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm(callback: CallbackQuery, state: FSMContext):
    _, user_id, total = callback.data.split(":")
    user_id, total = int(user_id), int(total)

    await state.update_data(user_id=user_id, total=total)
    await state.set_state(OrderForm.wait_delivery_price)

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:"
    )
    await callback.answer()


@router.message(OrderForm.wait_delivery_price)
async def set_delivery_price(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    user_id = data["user_id"]
    total = data["total"]

    # ‚úÖ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –µ—Å—Ç—å
    await db.ensure_user(
        tg_id=user_id,
    )

    try:
        delivery = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏).")
        return

    final_price = total + delivery
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å—á—ë—Ç
    await message.bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        f"üõí –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {total}‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery}‚ÇΩ\n"
        f"üí≥ –ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ: {final_price}‚ÇΩ\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n5469 1234 5678 9999 –°–±–µ—Ä–±–∞–Ω–∫",
    )

    await message.answer("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()
